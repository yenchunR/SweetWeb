{"ast":null,"code":"var _jsxFileName = \"/Users/ruru/react_hello/src/Component/Search.js\";\nimport React, { Component } from 'react';\nimport Script from 'react-load-script';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = \"5ae2e3f221c38a28845f05b61de3e1c96cc4be1e55e26b5e8166170a\";\n\nfunction apiGet(method, query) {\n  return new Promise(function (resolve, reject) {\n    var otmAPI = \"https://api.opentripmap.com/0.1/en/places/\" + method + \"?apikey=\" + apiKey;\n\n    if (query !== undefined) {\n      otmAPI += \"&\" + query;\n    }\n\n    fetch(otmAPI).then(response => response.json()).then(data => resolve(data)).catch(function (err) {\n      console.log(\"Fetch Error :-S\", err);\n    });\n  });\n}\n\nconst pageLength = 5;\nlet offset = 0;\nlet lon = 0;\nlet lat = 0;\nlet count = 0;\n\nfunction onShowPOI(data) {\n  let poi = document.getElementById(\"poi\");\n  poi.innerHTML = \"\";\n\n  if (data.preview) {\n    poi.innerHTML += `<img src=\"${data.preview.source}\">`;\n  }\n\n  poi.innerHTML += data.wikipedia_extracts ? data.wikipedia_extracts.html : data.info ? data.info.descr : \"No description\";\n  poi.innerHTML += `<p><a target=\"_blank\" href=\"${data.otm}\">Show more at OpenTripMap</a></p>`;\n}\n\nfunction createListItem(item) {\n  let a = document.createElement(\"a\");\n  a.className = \"list-group-item list-group-item-action\";\n  a.setAttribute(\"data-id\", item.xid);\n  a.innerHTML = `<h5 class=\"list-group-item-heading\">${item.name}</h5>\n      <p class=\"list-group-item-text\">${getCategoryName(item.kinds)}</p>`;\n  a.addEventListener(\"click\", function () {\n    document.querySelectorAll(\"#list a\").forEach(function (item) {\n      item.classList.remove(\"active\");\n    });\n    this.classList.add(\"active\");\n    let xid = this.getAttribute(\"data-id\");\n    apiGet(\"xid/\" + xid).then(data => onShowPOI(data));\n  });\n  return a;\n}\n\nfunction loadList() {\n  apiGet(\"radius\", `radius=1000&limit=${pageLength}&offset=${offset}&lon=${lon}&lat=${lat}&rate=2&format=json`).then(function (data) {\n    let list = document.getElementById(\"list\");\n    list.innerHTML = \"\";\n    data.forEach(item => list.appendChild(createListItem(item)));\n    let nextBtn = document.getElementById(\"next_button\");\n\n    if (count < offset + pageLength) {\n      nextBtn.style.visibility = \"hidden\";\n    } else {\n      nextBtn.style.visibility = \"visible\";\n      nextBtn.innerText = `Next (${offset + pageLength} of ${count})`;\n    }\n  });\n}\n\nfunction firstLoad() {\n  apiGet(\"radius\", `radius=1000&limit=${pageLength}&offset=${offset}&lon=${lon}&lat=${lat}&rate=2&format=count`).then(function (data) {\n    count = data.count;\n    offset = 0;\n    document.getElementById(\"info\").innerHTML += `<p>${count} objects with description in a 1km radius</p>`;\n    loadList();\n  });\n}\n\ndocument.getElementById(\"search_form\").addEventListener(\"submit\", function (event) {\n  let name = document.getElementById(\"textbox\").value;\n  apiGet(\"geoname\", \"name=\" + name).then(function (data) {\n    let message = \"Name not found\";\n\n    if (data.status == \"OK\") {\n      message = data.name + \", \" + getCountryName(data.country);\n      lon = data.lon;\n      lat = data.lat;\n      firstLoad();\n    }\n\n    document.getElementById(\"info\").innerHTML = `<p>${message}</p>`;\n  });\n  event.preventDefault();\n});\ndocument.getElementById(\"next_button\").addEventListener(\"click\", function () {\n  offset += pageLength;\n  loadList();\n});\nvar layer_names = {\n  tidal_islands: {\n    n: \"tidal island [s]\",\n    e: \"🏝️\"\n  },\n  inland_islands: {\n    n: \"inland island [s]\",\n    e: \"🏝️\"\n  },\n  coral_islands: {\n    n: \"coral island [s]\",\n    e: \"🏝️\"\n  },\n  desert_islands: {\n    n: \"desert island [s]\",\n    e: \"🏝️\"\n  },\n  high_islands: {\n    n: \"high island [s]\",\n    e: \"🏝️\"\n  },\n  other_islands: {\n    n: \"island[other islands]\",\n    e: \"🏝️\"\n  },\n  hot_springs: {\n    n: \"hot spring [s]\",\n    e: \"💧\"\n  },\n  geysers: {\n    n: \"geyser [s]\",\n    e: \"💧\"\n  },\n  springs_others: {\n    n: \"spring[other springs]\",\n    e: \"💧\"\n  },\n  mountain_peaks: {\n    n: \"mountain peak [s]\",\n    e: \"⛰️\"\n  },\n  volcanoes: {\n    n: \"volcano  [es]\",\n    e: \"⛰️\"\n  },\n  caves: {\n    n: \"cave [s]\",\n    e: \"⛰️\"\n  },\n  canyons: {\n    n: \"canyon [s]\",\n    e: \"⛰️\"\n  },\n  rock_formations: {\n    n: \"rock formation [s]\",\n    e: \"⛰️\"\n  },\n  crater_lakes: {\n    n: \"crater lake [s]\",\n    e: \"🌊\"\n  },\n  rift_lakes: {\n    n: \"rift lake [s]\",\n    e: \"🌊\"\n  },\n  salt_lakes: {\n    n: \"salt lake [s]\",\n    e: \"🌊\"\n  },\n  dry_lakes: {\n    n: \"dry lake [s]\",\n    e: \"🌊\"\n  },\n  reservoirs: {\n    n: \"reservoir [s]\",\n    e: \"🌊\"\n  },\n  rivers: {\n    n: \"river [s]\",\n    e: \"🌊\"\n  },\n  canals: {\n    n: \"canal [s]\",\n    e: \"🌊\"\n  },\n  waterfalls: {\n    n: \"waterfall [s]\",\n    e: \"🌊\"\n  },\n  lagoons: {\n    n: \"lagoon [s]\",\n    e: \"🌊\"\n  },\n  other_lakes: {\n    n: \"lake[other lakes]\",\n    e: \"🌊\"\n  },\n  golden_sand_beaches: {\n    n: \"golden sand beach  [es]\",\n    e: \"🏖️\"\n  },\n  white_sand_beaches: {\n    n: \"white sand beach  [es]\",\n    e: \"🏖️\"\n  },\n  black_sand_beaches: {\n    n: \"black sand beach  [es]\",\n    e: \"🏖️\"\n  },\n  shingle_beaches: {\n    n: \"shingle beach  [es]\",\n    e: \"🏖️\"\n  },\n  rocks_beaches: {\n    n: \"rocks beach  [es]\",\n    e: \"🏖️\"\n  },\n  urbans_beaches: {\n    n: \"urbans beach  [es]\",\n    e: \"🏖️\"\n  },\n  nude_beaches: {\n    n: \"nude beach  [es]\",\n    e: \"🏖️\"\n  },\n  other_beaches: {\n    n: \"beach[other beaches]\",\n    e: \"🏖️\"\n  },\n  aquatic_protected_areas: {\n    n: \"aquatic protected area [s]\",\n    e: \"🏞️\"\n  },\n  wildlife_reserves: {\n    n: \"wildlife reserve [s]\",\n    e: \"🏞️\"\n  },\n  national_parks: {\n    n: \"national park [s]\",\n    e: \"🏞️\"\n  },\n  nature_reserves_others: {\n    n: \"nature reserve[other nature reserves]\",\n    e: \"🏞️\"\n  },\n  natural_monuments: {\n    n: \"natural monument [s]\",\n    e: \"🏞️\"\n  },\n  other_nature_conservation_areas: {\n    n: \"nature conservation area [s]\",\n    e: \"🏞️\"\n  },\n  glaciers: {\n    n: \"Glacier [s]\",\n    e: \"🏔️\"\n  },\n  national_museums: {\n    n: \"national museum [s]\",\n    e: \"🏛️\"\n  },\n  local_museums: {\n    n: \"local museum [s]\",\n    e: \"🏛️\"\n  },\n  maritime_museums: {\n    n: \"maritime museum [s]\",\n    e: \"🏛️\"\n  },\n  railway_museums: {\n    n: \"railway museum [s]\",\n    e: \"🏛️\"\n  },\n  aviation_museums: {\n    n: \"aviation museum [s]\",\n    e: \"🏛️\"\n  },\n  automobile_museums: {\n    n: \"automobile museum [s]\",\n    e: \"🏛️\"\n  },\n  computer_museums: {\n    n: \"computer museum [s]\",\n    e: \"🏛️\"\n  },\n  heritage_railways: {\n    n: \"heritage railway [s]\",\n    e: \"🏛️\"\n  },\n  other_technology_museums: {\n    n: \"technology museum[other technology museums]\",\n    e: \"🏛️\"\n  },\n  science_museums: {\n    n: \"science museum [s]\",\n    e: \"🏛️\"\n  },\n  planetariums: {\n    n: \"planetarium [s]\",\n    e: \"🏛️\"\n  },\n  military_museums: {\n    n: \"military museum [s]\",\n    e: \"🏛️\"\n  },\n  history_museums: {\n    n: \"history museum [s]\",\n    e: \"🏛️\"\n  },\n  archaeological_museums: {\n    n: \"archaeological museum [s]\",\n    e: \"🏛️\"\n  },\n  biographical_museums: {\n    n: \"biographical museum [s]\",\n    e: \"🏛️\"\n  },\n  open_air_museums: {\n    n: \"open-air museum [s]\",\n    e: \"🏛️\"\n  },\n  fashion_museums: {\n    n: \"fashion museum [s]\",\n    e: \"🏛️\"\n  },\n  children_museums: {\n    n: \"children museum [s]\",\n    e: \"🏛️\"\n  },\n  historic_house_museums: {\n    n: \"historic house museum [s]\",\n    e: \"🏛️\"\n  },\n  art_galleries: {\n    n: \"art gallery  [ies]\",\n    e: \"🏛️\"\n  },\n  zoos: {\n    n: \"zoo [s]\",\n    e: \"🏛️\"\n  },\n  aquariums: {\n    n: \"aquarium [s]\",\n    e: \"🏛️\"\n  },\n  other_museums: {\n    n: \"museum[other museums]\",\n    e: \"🏛️\"\n  },\n  sylvan_theatres: {\n    n: \"sylvan theatre [s]\",\n    e: \"🎭\"\n  },\n  opera_houses: {\n    n: \"opera house [s]\",\n    e: \"🎭\"\n  },\n  music_venues: {\n    n: \"music venue [s]\",\n    e: \"🎭\"\n  },\n  concert_halls: {\n    n: \"concert hall [s]\",\n    e: \"🎭\"\n  },\n  puppetries: {\n    n: \"puppetry  [ies]\",\n    e: \"🎭\"\n  },\n  children_theatres: {\n    n: \"сhildren\\u0027s theatre [s]\",\n    e: \"🎭\"\n  },\n  other_theatres: {\n    n: \"theatre[other theatres]\",\n    e: \"🎭\"\n  },\n  cinemas: {\n    n: \"movie theatre [s]\",\n    e: \"🎭\"\n  },\n  circuses: {\n    n: \"circus  [es]\",\n    e: \"🎭\"\n  },\n  wall_painting: {\n    n: \"wall painting\",\n    e: \"⛲\"\n  },\n  squares: {\n    n: \"street[squares and streets]\",\n    e: \"⛲\"\n  },\n  installation: {\n    n: \"installation\",\n    e: \"⛲\"\n  },\n  gardens_and_parks: {\n    n: \"park[gardens and parks]\",\n    e: \"⛲\"\n  },\n  fountains: {\n    n: \"fountain [s]\",\n    e: \"⛲\"\n  },\n  sculptures: {\n    n: \"sculpture [s]\",\n    e: \"⛲\"\n  },\n  historic_districts: {\n    n: \"historic district [s]\",\n    e: \"🛡️\"\n  },\n  historic_settlements: {\n    n: \"historic settlement [s]\",\n    e: \"🛡️\"\n  },\n  fishing_villages: {\n    n: \"fishing village [s]\",\n    e: \"🛡️\"\n  },\n  battlefields: {\n    n: \"battlefield [s]\",\n    e: \"🛡️\"\n  },\n  castles: {\n    n: \"castle [s]\",\n    e: \"🏰\"\n  },\n  hillforts: {\n    n: \"hillfort [s]\",\n    e: \"🏰\"\n  },\n  fortified_towers: {\n    n: \"fortified tower [s]\",\n    e: \"🏰\"\n  },\n  defensive_walls: {\n    n: \"defensive wall [s]\",\n    e: \"🏰\"\n  },\n  bunkers: {\n    n: \"bunker [s]\",\n    e: \"🏰\"\n  },\n  kremlins: {\n    n: \"kremlin [s]\",\n    e: \"🏰\"\n  },\n  other_fortifications: {\n    n: \"fortification[other fortifications]\",\n    e: \"🏰\"\n  },\n  milestones: {\n    n: \"milestone [s]\",\n    e: \"🗿\"\n  },\n  monuments: {\n    n: \"monument [s]\",\n    e: \"🗿\"\n  },\n  megaliths: {\n    n: \"megalith [s]\",\n    e: \"🏺\"\n  },\n  menhirs: {\n    n: \"menhir [s]\",\n    e: \"🏺\"\n  },\n  roman_villas: {\n    n: \"roman villa [s]\",\n    e: \"🏺\"\n  },\n  cave_paintings: {\n    n: \"cave painting [s]\",\n    e: \"🏺\"\n  },\n  settlements: {\n    n: \"settlement [s]\",\n    e: \"🏺\"\n  },\n  rune_stones: {\n    n: \"rune stone [s]\",\n    e: \"🏺\"\n  },\n  other_archaeological_sites: {\n    n: \"archaeological site [s]\",\n    e: \"🏺\"\n  },\n  cemeteries: {\n    n: \"cemetery  [ies]\",\n    e: \"⚱️\"\n  },\n  war_graves: {\n    n: \"war grave [s]\",\n    e: \"⚱️\"\n  },\n  necropolises: {\n    n: \"necropolis  [es]\",\n    e: \"⚱️\"\n  },\n  dolmens: {\n    n: \"dolmen [s]\",\n    e: \"⚱️\"\n  },\n  tumuluses: {\n    n: \"tumulus  [es]\",\n    e: \"⚱️\"\n  },\n  mausoleums: {\n    n: \"mausoleum [s]\",\n    e: \"⚱️\"\n  },\n  war_memorials: {\n    n: \"war memorial [s]\",\n    e: \"⚱️\"\n  },\n  crypts: {\n    n: \"crypt [s]\",\n    e: \"⚱️\"\n  },\n  other_burial_places: {\n    n: \"burial place[other burial places]\",\n    e: \"⚱️\"\n  },\n  eastern_orthodox_churches: {\n    n: \"eastern orthodox church  [es]\",\n    e: \"⛪\"\n  },\n  catholic_churches: {\n    n: \"catholic church  [es]\",\n    e: \"⛪\"\n  },\n  other_churches: {\n    n: \"church[other churches]\",\n    e: \"⛪\"\n  },\n  cathedrals: {\n    n: \"cathedral [s]\",\n    e: \"🛐\"\n  },\n  mosques: {\n    n: \"mosque [s]\",\n    e: \"🕌\"\n  },\n  synagogues: {\n    n: \"synagogue [s]\",\n    e: \"🕍\"\n  },\n  buddhist_temples: {\n    n: \"buddhist temple [s]\",\n    e: \"☸️\"\n  },\n  hindu_temples: {\n    n: \"hindu temple [s]\",\n    e: \"🕉️\"\n  },\n  egyptian_temples: {\n    n: \"egyptian temple [s]\",\n    e: \"🛐\"\n  },\n  other_temples: {\n    n: \"temple[other temples]\",\n    e: \"🛐\"\n  },\n  monasteries: {\n    n: \"monastery  [ies]\",\n    e: \"🛐\"\n  },\n  pyramids: {\n    n: \"pyramid [s]\",\n    e: \"🏡\"\n  },\n  amphitheatres: {\n    n: \"amphitheatre [s]\",\n    e: \"🏡\"\n  },\n  triumphal_archs: {\n    n: \"triumphal arch [s]\",\n    e: \"🏡\"\n  },\n  palaces: {\n    n: \"palace [s]\",\n    e: \"🏡\"\n  },\n  manor_houses: {\n    n: \"manor house [s]\",\n    e: \"🏡\"\n  },\n  wineries: {\n    n: \"wineries\",\n    e: \"🏡\"\n  },\n  farms: {\n    n: \"farms\",\n    e: \"🏡\"\n  },\n  other_buildings_and_structures: {\n    n: \"structure[buildings and structures]\",\n    e: \"🏡\"\n  },\n  destroyed_objects: {\n    n: \"destroyed object [s]\",\n    e: \"🏡\"\n  },\n  skyscrapers: {\n    n: \"Skyscraper [s]\",\n    e: \"🏙️\"\n  },\n  moveable_bridges: {\n    n: \"moveable bridge [s]\",\n    e: \"🌉\"\n  },\n  stone_bridges: {\n    n: \"stone bridge [s]\",\n    e: \"🌉\"\n  },\n  viaducts: {\n    n: \"viaduct [s]\",\n    e: \"🌉\"\n  },\n  roman_bridges: {\n    n: \"Roman bridge [s]\",\n    e: \"🌉\"\n  },\n  footbridges: {\n    n: \"footbridge [s]\",\n    e: \"🌉\"\n  },\n  aqueducts: {\n    n: \"aqueduct [s]\",\n    e: \"🌉\"\n  },\n  suspension_bridges: {\n    n: \"suspension bridge [s]\",\n    e: \"🌉\"\n  },\n  other_bridges: {\n    n: \"bridge[other bridges]\",\n    e: \"🌉\"\n  },\n  observation_towers: {\n    n: \"observation tower [s]\",\n    e: \"🗼\"\n  },\n  watchtowers: {\n    n: \"watchtower [s]\",\n    e: \"🗼\"\n  },\n  water_towers: {\n    n: \"water tower [s]\",\n    e: \"🗼\"\n  },\n  transmitter_towers: {\n    n: \"transmitter tower [s]\",\n    e: \"🗼\"\n  },\n  clock_towers: {\n    n: \"clock tower [s]\",\n    e: \"🗼\"\n  },\n  bell_towers: {\n    n: \"bell tower [s]\",\n    e: \"🗼\"\n  },\n  minarets: {\n    n: \"minaret [s]\",\n    e: \"🗼\"\n  },\n  other_towers: {\n    n: \"tower[other towers]\",\n    e: \"🗼\"\n  },\n  lighthouses: {\n    n: \"Lighthouse [s]\",\n    e: \"🗼\"\n  },\n  railway_stations: {\n    n: \"Railway station [s]\",\n    e: \"🏭\"\n  },\n  factories: {\n    n: \"Factory  [ies]\",\n    e: \"🏭\"\n  },\n  mints: {\n    n: \"Mint [s]\",\n    e: \"🏭\"\n  },\n  power_stations: {\n    n: \"Power station [s]\",\n    e: \"🏭\"\n  },\n  dams: {\n    n: \"Dam [s]\",\n    e: \"🏭\"\n  },\n  mills: {\n    n: \"Mill [s]\",\n    e: \"🏭\"\n  },\n  abandoned_railway_stations: {\n    n: \"Abandoned railway station [s]\",\n    e: \"🏭\"\n  },\n  abandoned_mineshafts: {\n    n: \"Abandoned mineshaft [s]\",\n    e: \"🏭\"\n  },\n  mineshafts: {\n    n: \"Mineshaft [s]\",\n    e: \"🏭\"\n  },\n  other_buildings: {\n    n: \"Building[Other buildings]\",\n    e: \"🏭\"\n  },\n  sundials: {\n    n: \"Sundial [s]\",\n    e: \"📸\"\n  },\n  view_points: {\n    n: \"View point [s]\",\n    e: \"📸\"\n  },\n  red_telephone_boxes: {\n    n: \"Red telephone box  [es]\",\n    e: \"📸\"\n  },\n  tourist_object: {\n    n: \"tourist attraction [s]\",\n    e: \"📸\"\n  },\n  historic_object: {\n    n: \"historic attraction [s]\",\n    e: \"📸\"\n  },\n  amusement_parks: {\n    n: \"amusement park [s]\",\n    e: \"📸\"\n  },\n  miniature_parks: {\n    n: \"miniature park [s]\",\n    e: \"📸\"\n  },\n  water_parks: {\n    n: \"water park [s]\",\n    e: \"📸\"\n  },\n  roller_coasters: {\n    n: \"roller coaster [s]\",\n    e: \"📸\"\n  },\n  ferris_wheels: {\n    n: \"ferris wheel [s]\",\n    e: \"📸\"\n  },\n  other_amusement_rides: {\n    n: \"amusement ride[other amusement rides]\",\n    e: \"📸\"\n  },\n  saunas: {\n    n: \"sauna[s]\",\n    e: \"📸\"\n  },\n  thermal_baths: {\n    n: \"thermal bath [s]\",\n    e: \"📸\"\n  },\n  open_air_baths: {\n    n: \"open-air bath [s]\",\n    e: \"📸\"\n  },\n  other_bathhouses: {\n    n: \"bathhouse [s]\",\n    e: \"📸\"\n  },\n  skiing: {\n    n: \"skiing\",\n    e: \"📸\"\n  },\n  cross_country_skiing: {\n    n: \"cross country skiing\",\n    e: \"📸\"\n  },\n  other_winter_sports: {\n    n: \"winter sport[other winter sports]\",\n    e: \"📸\"\n  },\n  dive_centers: {\n    n: \"dive center [s]\",\n    e: \"📸\"\n  },\n  dive_spots: {\n    n: \"dive spot [s]\",\n    e: \"📸\"\n  },\n  wrecks: {\n    n: \"wreck [s]\",\n    e: \"📸\"\n  },\n  climbing: {\n    n: \"climbing\",\n    e: \"📸\"\n  },\n  surfing: {\n    n: \"surfing\",\n    e: \"📸\"\n  },\n  kitesurfing: {\n    n: \"kitesurfing\",\n    e: \"📸\"\n  },\n  stadiums: {\n    n: \"stadium [s]\",\n    e: \"📸\"\n  },\n  pools: {\n    n: \"pool [s]\",\n    e: \"📸\"\n  },\n  strip_clubs: {\n    n: \"strip club [s]\",\n    e: \"📸\"\n  },\n  casino: {\n    n: \"casino\",\n    e: \"📸\"\n  },\n  brothels: {\n    n: \"brothel [s]\",\n    e: \"📸\"\n  },\n  nightclubs: {\n    n: \"nightclub [s]\",\n    e: \"📸\"\n  },\n  alcohol: {\n    n: \"alcohol\",\n    e: \"📸\"\n  },\n  adult_hotels: {\n    n: \"love hotel [s]\",\n    e: \"📸\"\n  },\n  erotic_shops: {\n    n: \"erotic shop [s]\",\n    e: \"📸\"\n  },\n  hookah: {\n    n: \"hookah\",\n    e: \"📸\"\n  },\n  car_rental: {\n    n: \"Car rental\",\n    e: \"📸\"\n  },\n  car_sharing: {\n    n: \"Car sharing\",\n    e: \"📸\"\n  },\n  car_wash: {\n    n: \"Car wash\",\n    e: \"📸\"\n  },\n  charging_station: {\n    n: \"Charging station [s]\",\n    e: \"📸\"\n  },\n  bicycle_rental: {\n    n: \"Bicycle rental\",\n    e: \"📸\"\n  },\n  boat_sharing: {\n    n: \"Boat sharing\",\n    e: \"📸\"\n  },\n  fuel: {\n    n: \"Fuel\",\n    e: \"📸\"\n  },\n  supermarkets: {\n    n: \"Supermarket [s]\",\n    e: \"📸\"\n  },\n  conveniences: {\n    n: \"Convenience [s]\",\n    e: \"📸\"\n  },\n  fish_stores: {\n    n: \"Fish store [s]\",\n    e: \"📸\"\n  },\n  outdoor: {\n    n: \"Outdoor\",\n    e: \"📸\"\n  },\n  malls: {\n    n: \"Mall [s]\",\n    e: \"📸\"\n  },\n  marketplaces: {\n    n: \"Marketplace [s]\",\n    e: \"📸\"\n  },\n  bakeries: {\n    n: \"Bakery  [ies]\",\n    e: \"📸\"\n  },\n  restaurants: {\n    n: \"Restaurant [s]\",\n    e: \"📸\"\n  },\n  cafes: {\n    n: \"Cafe [s]\",\n    e: \"📸\"\n  },\n  fast_food: {\n    n: \"Fast food\",\n    e: \"📸\"\n  },\n  food_courts: {\n    n: \"Food court [s]\",\n    e: \"📸\"\n  },\n  pubs: {\n    n: \"Pub [s]\",\n    e: \"📸\"\n  },\n  bars: {\n    n: \"Bar [s]\",\n    e: \"📸\"\n  },\n  biergartens: {\n    n: \"Biergarten [s]\",\n    e: \"📸\"\n  },\n  picnic_site: {\n    n: \"Picnic site [s]\",\n    e: \"📸\"\n  },\n  bank: {\n    n: \"Bank [s]\",\n    e: \"📸\"\n  },\n  atm: {\n    n: \"ATM\",\n    e: \"📸\"\n  },\n  bureau_de_change: {\n    n: \"Bureau de change\",\n    e: \"📸\"\n  },\n  apartments: {\n    n: \"Apartment [s]\",\n    e: \"📸\"\n  },\n  guest_houses: {\n    n: \"Guest house [s]\",\n    e: \"📸\"\n  },\n  campsites: {\n    n: \"Campsite [s]\",\n    e: \"📸\"\n  },\n  resorts: {\n    n: \"Resort [s]\",\n    e: \"📸\"\n  },\n  motels: {\n    n: \"Motel [s]\",\n    e: \"📸\"\n  },\n  other_hotels: {\n    n: \"Hotel [s]\",\n    e: \"📸\"\n  },\n  hostels: {\n    n: \"Hostel [s]\",\n    e: \"📸\"\n  },\n  villas_and_chalet: {\n    n: \"Villa [Villas and chalet]\",\n    e: \"📸\"\n  },\n  alpine_hut: {\n    n: \"Alpine hut [s]\",\n    e: \"📸\"\n  },\n  love_hotels: {\n    n: \"Love hotel [s]\",\n    e: \"📸\"\n  }\n};\nvar isoCountries = {\n  AD: \"Andorra\",\n  AE: \"United Arab Emirates\",\n  AF: \"Afghanistan\",\n  AG: \"Antigua and Barbuda\",\n  AI: \"Anguilla\",\n  AL: \"Albania\",\n  AM: \"Armenia\",\n  AN: \"Netherlands Antilles\",\n  AO: \"Angola\",\n  AQ: \"Antarctica\",\n  AR: \"Argentina\",\n  AS: \"American Samoa\",\n  AT: \"Austria\",\n  AU: \"Australia\",\n  AW: \"Aruba\",\n  AX: \"Åland Islands\",\n  AZ: \"Azerbaijan\",\n  BA: \"Bosnia and Herzegovina\",\n  BB: \"Barbados\",\n  BD: \"Bangladesh\",\n  BE: \"Belgium\",\n  BF: \"Burkina Faso\",\n  BG: \"Bulgaria\",\n  BH: \"Bahrain\",\n  BI: \"Burundi\",\n  BJ: \"Benin\",\n  BL: \"Saint Barthélemy\",\n  BM: \"Bermuda\",\n  BN: \"Brunei\",\n  BO: \"Bolivia\",\n  BQ: \"Bonaire, Saint Eustatius, and Saba\",\n  BR: \"Brazil\",\n  BS: \"Bahamas\",\n  BT: \"Bhutan\",\n  BV: \"Bouvet Island\",\n  BW: \"Botswana\",\n  BY: \"Belarus\",\n  BZ: \"Belize\",\n  CA: \"Canada\",\n  CC: \"Cocos [Keeling] Islands\",\n  CD: \"Belgian Congo\",\n  CF: \"Central African Republic\",\n  CG: \"Republic of the Congo\",\n  CH: \"Switzerland\",\n  CI: \"Ivory Coast\",\n  CK: \"Cook Islands\",\n  CL: \"Chile\",\n  CM: \"Cameroon\",\n  CN: \"China\",\n  CO: \"Colombia\",\n  CR: \"Costa Rica\",\n  CS: \"Serbia and Montenegro\",\n  CU: \"Cuba\",\n  CV: \"Cape Verde\",\n  CW: \"Curaçao\",\n  CX: \"Christmas Island\",\n  CY: \"Cyprus\",\n  CZ: \"Czech Republic\",\n  DE: \"Germany\",\n  DJ: \"Djibouti\",\n  DK: \"Denmark\",\n  DM: \"Dominica\",\n  DO: \"Dominican Republic\",\n  DZ: \"Algeria\",\n  EC: \"Ecuador\",\n  EE: \"Estonia\",\n  EG: \"Egypt\",\n  EH: \"Western Sahara\",\n  ER: \"Eritrea\",\n  ES: \"Spain\",\n  ET: \"Ethiopia\",\n  FI: \"Finland\",\n  FJ: \"Fiji\",\n  FK: \"Falkland Islands\",\n  FM: \"Micronesia\",\n  FO: \"Faroe Islands\",\n  FR: \"France\",\n  GA: \"Gabon\",\n  GB: \"United Kingdom\",\n  GD: \"Grenada\",\n  GE: \"Georgia\",\n  GF: \"French Guiana\",\n  GG: \"Guernsey\",\n  GH: \"Ghana\",\n  GI: \"Gibraltar\",\n  GL: \"Greenland\",\n  GM: \"The Gambia\",\n  GN: \"Guinea\",\n  GP: \"Guadeloupe\",\n  GQ: \"Equatorial Guinea\",\n  GR: \"Greece\",\n  GS: \"South Georgia and the South Sandwich Islands\",\n  GT: \"Guatemala\",\n  GU: \"Guam\",\n  GW: \"Guinea-Bissau\",\n  GY: \"Guyana\",\n  HK: \"Hong Kong\",\n  HM: \"Heard Island and McDonald Islands\",\n  HN: \"Honduras\",\n  HR: \"Croatia\",\n  HT: \"Haiti\",\n  HU: \"Hungary\",\n  ID: \"Indonesia\",\n  IE: \"Ireland\",\n  IL: \"Israel\",\n  IM: \"Isle of Man\",\n  IN: \"India\",\n  IO: \"British Indian Ocean Territory\",\n  IQ: \"Iraq\",\n  IR: \"Iran\",\n  IS: \"Iceland\",\n  IT: \"Italy\",\n  JE: \"Jersey\",\n  JM: \"Jamaica\",\n  JO: \"Hashemite Kingdom of Jordan\",\n  JP: \"Japan\",\n  KE: \"Kenya\",\n  KG: \"Kyrgyzstan\",\n  KH: \"Cambodia\",\n  KI: \"Kiribati\",\n  KM: \"Comoros\",\n  KN: \"St Kitts and Nevis\",\n  KP: \"North Korea\",\n  KR: \"Republic of Korea\",\n  KW: \"Kuwait\",\n  KY: \"Cayman Islands\",\n  KZ: \"Kazakhstan\",\n  LA: \"Laos\",\n  LB: \"Lebanon\",\n  LC: \"St Lucia\",\n  LI: \"Liechtenstein\",\n  LK: \"Sri Lanka\",\n  LR: \"Liberia\",\n  LS: \"Lesotho\",\n  LT: \"Republic of Lithuania\",\n  LU: \"Luxembourg\",\n  LV: \"Latvia\",\n  LY: \"Libya\",\n  MA: \"Morocco\",\n  MC: \"Monaco\",\n  MD: \"Republic of Moldova\",\n  ME: \"Montenegro\",\n  MF: \"Saint Martin\",\n  MG: \"Madagascar\",\n  MH: \"Marshall Islands\",\n  MK: \"Macedonia\",\n  ML: \"Mali\",\n  MM: \"Myanmar [Burma]\",\n  MN: \"Mongolia\",\n  MO: \"Macao\",\n  MP: \"Northern Mariana Islands\",\n  MQ: \"Martinique\",\n  MR: \"Mauritania\",\n  MS: \"Montserrat\",\n  MT: \"Malta\",\n  MU: \"Mauritius\",\n  MV: \"Maldives\",\n  MW: \"Malawi\",\n  MX: \"Mexico\",\n  MY: \"Malaysia\",\n  MZ: \"Mozambique\",\n  NA: \"Namibia\",\n  NC: \"New Caledonia\",\n  NE: \"Niger\",\n  NF: \"Norfolk Island\",\n  NG: \"Nigeria\",\n  NI: \"Nicaragua\",\n  NL: \"Netherlands\",\n  NO: \"Norway\",\n  NP: \"Nepal\",\n  NR: \"Republic of Nauru\",\n  NU: \"Niue\",\n  NZ: \"New Zealand\",\n  OM: \"Oman\",\n  PA: \"Panama\",\n  PE: \"Peru\",\n  PF: \"French Polynesia\",\n  PG: \"Papua New Guinea\",\n  PH: \"Philippines\",\n  PK: \"Pakistan\",\n  PL: \"Poland\",\n  PM: \"Saint Pierre and Miquelon\",\n  PN: \"Pitcairn Islands\",\n  PR: \"Puerto Rico\",\n  PS: \"Palestine\",\n  PT: \"Portugal\",\n  PW: \"Palau\",\n  PY: \"Paraguay\",\n  QA: \"Qatar\",\n  RE: \"Réunion\",\n  RO: \"Romania\",\n  RS: \"Serbia\",\n  RU: \"Russia\",\n  RW: \"Rwanda\",\n  SA: \"Saudi Arabia\",\n  SB: \"Solomon Islands\",\n  SC: \"Seychelles\",\n  SD: \"Sudan\",\n  SE: \"Sweden\",\n  SG: \"Singapore\",\n  SH: \"Saint Helena\",\n  SI: \"Slovenia\",\n  SJ: \"Svalbard and Jan Mayen\",\n  SK: \"Slovakia\",\n  SL: \"Sierra Leone\",\n  SM: \"San Marino\",\n  SN: \"Senegal\",\n  SO: \"Somalia\",\n  SR: \"Suriname\",\n  SS: \"Republic of South Sudan\",\n  ST: \"São Tomé and Príncipe\",\n  SV: \"El Salvador\",\n  SX: \"Sint Maarten\",\n  SY: \"Syria\",\n  SZ: \"Swaziland\",\n  TC: \"Turks and Caicos Islands\",\n  TD: \"Chad\",\n  TF: \"French Southern Territories\",\n  TG: \"Togo\",\n  TH: \"Thailand\",\n  TJ: \"Tajikistan\",\n  TK: \"Tokelau\",\n  TL: \"East Timor\",\n  TM: \"Turkmenistan\",\n  TN: \"Tunisia\",\n  TO: \"Tonga\",\n  TR: \"Turkey\",\n  TT: \"Trinidad and Tobago\",\n  TV: \"Tuvalu\",\n  TW: \"Taiwan\",\n  TZ: \"Tanzania\",\n  UA: \"Ukraine\",\n  UG: \"Uganda\",\n  UM: \"U.S. Minor Outlying Islands\",\n  US: \"United States of America\",\n  UY: \"Uruguay\",\n  UZ: \"Uzbekistan\",\n  VA: \"Vatican City\",\n  VC: \"St Vincent and Grenadines\",\n  VE: \"Venezuela\",\n  VG: \"British Virgin Islands\",\n  VI: \"U.S. Virgin Islands\",\n  VN: \"Vietnam\",\n  VU: \"Vanuatu\",\n  WF: \"Wallis and Futuna\",\n  WS: \"Samoa\",\n  XK: \"Republic of Kosovo\",\n  YE: \"Yemen\",\n  YT: \"Mayotte\",\n  ZA: \"Republic of South Africa\",\n  ZM: \"Zambia\",\n  ZW: \"Zimbabwe\"\n};\n\nfunction getCountryName(countryCode) {\n  if (isoCountries.hasOwnProperty(countryCode)) {\n    return isoCountries[countryCode];\n  } else {\n    return countryCode;\n  }\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction parsePlural(label) {\n  var sb_single = new Array(\"\");\n  var sb_plural = new Array(\"\");\n  var spaces = 0;\n\n  for (var i = 0; i < label.length; i++) {\n    var ch = label.charAt(i);\n\n    if (ch != \"[\") {\n      sb_single.push(ch);\n      sb_plural.push(ch);\n\n      if (ch == \" \") {\n        spaces++;\n      } else {\n        spaces = 0;\n      }\n    } else {\n      var sb = new Array(\"\");\n      var j = i + 1;\n\n      for (; j < label.length; j++) {\n        ch = label.charAt(j);\n        if (ch == \"]\") break;\n        sb.push(ch);\n      }\n\n      var len = j - i - 1;\n      i = sb_plural.length;\n      sb_plural.splice(Math.max(0, i - len), len);\n      sb_plural.push(sb.join(\"\"));\n\n      if (spaces != 0) {\n        i = sb_single.length;\n        sb_single.splice(Math.max(0, i - spaces), spaces);\n      }\n\n      i = j;\n    }\n  }\n\n  return {\n    single: capitalizeFirstLetter(sb_single.join(\"\")),\n    plural: sb_plural.join(\"\")\n  };\n}\n\nfunction getCategoryName(kinds) {\n  let names = [];\n  kinds.split(\",\").forEach(function (kind) {\n    let item = layer_names[kind];\n    if (item) names.push(parsePlural(item.n).single);\n  });\n  return names.join(\", \");\n}\n\nexport default class Search extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"body\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"search_form\",\n          class: \"input-group mb-4 border p-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"input-group-prepend border-0\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"button-search\",\n              type: \"submit\",\n              class: \"btn btn-link \",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"fa fa-search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"textbox\",\n            type: \"search\",\n            placeholder: \"Region, city, village, etc. (e.g. Moscow)\",\n            \"aria-describedby\": \"button-search\",\n            class: \"form-control bg-none border-0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"info\",\n          class: \"alert alert-primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"col-12 col-lg-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"list\",\n              class: \"list-group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n              class: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                id: \"next_button\",\n                type: \"button\",\n                class: \"btn btn-primary\",\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"col-12 col-lg-7\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"poi\",\n              class: \"alert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/ruru/react_hello/src/Component/Search.js"],"names":["React","Component","Script","apiKey","apiGet","method","query","Promise","resolve","reject","otmAPI","undefined","fetch","then","response","json","data","catch","err","console","log","pageLength","offset","lon","lat","count","onShowPOI","poi","document","getElementById","innerHTML","preview","source","wikipedia_extracts","html","info","descr","otm","createListItem","item","a","createElement","className","setAttribute","xid","name","getCategoryName","kinds","addEventListener","querySelectorAll","forEach","classList","remove","add","getAttribute","loadList","list","appendChild","nextBtn","style","visibility","innerText","firstLoad","event","value","message","status","getCountryName","country","preventDefault","layer_names","tidal_islands","n","e","inland_islands","coral_islands","desert_islands","high_islands","other_islands","hot_springs","geysers","springs_others","mountain_peaks","volcanoes","caves","canyons","rock_formations","crater_lakes","rift_lakes","salt_lakes","dry_lakes","reservoirs","rivers","canals","waterfalls","lagoons","other_lakes","golden_sand_beaches","white_sand_beaches","black_sand_beaches","shingle_beaches","rocks_beaches","urbans_beaches","nude_beaches","other_beaches","aquatic_protected_areas","wildlife_reserves","national_parks","nature_reserves_others","natural_monuments","other_nature_conservation_areas","glaciers","national_museums","local_museums","maritime_museums","railway_museums","aviation_museums","automobile_museums","computer_museums","heritage_railways","other_technology_museums","science_museums","planetariums","military_museums","history_museums","archaeological_museums","biographical_museums","open_air_museums","fashion_museums","children_museums","historic_house_museums","art_galleries","zoos","aquariums","other_museums","sylvan_theatres","opera_houses","music_venues","concert_halls","puppetries","children_theatres","other_theatres","cinemas","circuses","wall_painting","squares","installation","gardens_and_parks","fountains","sculptures","historic_districts","historic_settlements","fishing_villages","battlefields","castles","hillforts","fortified_towers","defensive_walls","bunkers","kremlins","other_fortifications","milestones","monuments","megaliths","menhirs","roman_villas","cave_paintings","settlements","rune_stones","other_archaeological_sites","cemeteries","war_graves","necropolises","dolmens","tumuluses","mausoleums","war_memorials","crypts","other_burial_places","eastern_orthodox_churches","catholic_churches","other_churches","cathedrals","mosques","synagogues","buddhist_temples","hindu_temples","egyptian_temples","other_temples","monasteries","pyramids","amphitheatres","triumphal_archs","palaces","manor_houses","wineries","farms","other_buildings_and_structures","destroyed_objects","skyscrapers","moveable_bridges","stone_bridges","viaducts","roman_bridges","footbridges","aqueducts","suspension_bridges","other_bridges","observation_towers","watchtowers","water_towers","transmitter_towers","clock_towers","bell_towers","minarets","other_towers","lighthouses","railway_stations","factories","mints","power_stations","dams","mills","abandoned_railway_stations","abandoned_mineshafts","mineshafts","other_buildings","sundials","view_points","red_telephone_boxes","tourist_object","historic_object","amusement_parks","miniature_parks","water_parks","roller_coasters","ferris_wheels","other_amusement_rides","saunas","thermal_baths","open_air_baths","other_bathhouses","skiing","cross_country_skiing","other_winter_sports","dive_centers","dive_spots","wrecks","climbing","surfing","kitesurfing","stadiums","pools","strip_clubs","casino","brothels","nightclubs","alcohol","adult_hotels","erotic_shops","hookah","car_rental","car_sharing","car_wash","charging_station","bicycle_rental","boat_sharing","fuel","supermarkets","conveniences","fish_stores","outdoor","malls","marketplaces","bakeries","restaurants","cafes","fast_food","food_courts","pubs","bars","biergartens","picnic_site","bank","atm","bureau_de_change","apartments","guest_houses","campsites","resorts","motels","other_hotels","hostels","villas_and_chalet","alpine_hut","love_hotels","isoCountries","AD","AE","AF","AG","AI","AL","AM","AN","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CS","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW","countryCode","hasOwnProperty","capitalizeFirstLetter","string","charAt","toUpperCase","slice","parsePlural","label","sb_single","Array","sb_plural","spaces","i","length","ch","push","sb","j","len","splice","Math","max","join","single","plural","names","split","kind","Search","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Script from 'react-load-script';\n\nconst apiKey = \"5ae2e3f221c38a28845f05b61de3e1c96cc4be1e55e26b5e8166170a\";\n\nfunction apiGet(method, query) {\n    return new Promise(function (resolve, reject) {\n        var otmAPI =\n            \"https://api.opentripmap.com/0.1/en/places/\" +\n            method +\n            \"?apikey=\" +\n            apiKey;\n        if (query !== undefined) {\n            otmAPI += \"&\" + query;\n        }\n        fetch(otmAPI)\n            .then(response => response.json())\n            .then(data => resolve(data))\n            .catch(function (err) {\n                console.log(\"Fetch Error :-S\", err);\n            });\n    });\n}\n\nconst pageLength = 5;\n\nlet offset = 0;\nlet lon = 0;\nlet lat = 0;\nlet count = 0;\n\nfunction onShowPOI(data) {\n    let poi = document.getElementById(\"poi\");\n    poi.innerHTML = \"\";\n    if (data.preview) {\n        poi.innerHTML += `<img src=\"${data.preview.source}\">`;\n    }\n    poi.innerHTML += data.wikipedia_extracts\n        ? data.wikipedia_extracts.html\n        : data.info\n            ? data.info.descr\n            : \"No description\";\n\n    poi.innerHTML += `<p><a target=\"_blank\" href=\"${data.otm}\">Show more at OpenTripMap</a></p>`;\n}\n\nfunction createListItem(item) {\n    let a = document.createElement(\"a\");\n    a.className = \"list-group-item list-group-item-action\";\n    a.setAttribute(\"data-id\", item.xid);\n    a.innerHTML = `<h5 class=\"list-group-item-heading\">${item.name}</h5>\n      <p class=\"list-group-item-text\">${getCategoryName(item.kinds)}</p>`;\n\n    a.addEventListener(\"click\", function () {\n        document.querySelectorAll(\"#list a\").forEach(function (item) {\n            item.classList.remove(\"active\");\n        });\n        this.classList.add(\"active\");\n        let xid = this.getAttribute(\"data-id\");\n        apiGet(\"xid/\" + xid).then(data => onShowPOI(data));\n    });\n    return a;\n}\n\nfunction loadList() {\n    apiGet(\n        \"radius\",\n        `radius=1000&limit=${pageLength}&offset=${offset}&lon=${lon}&lat=${lat}&rate=2&format=json`\n    ).then(function (data) {\n        let list = document.getElementById(\"list\");\n        list.innerHTML = \"\";\n        data.forEach(item => list.appendChild(createListItem(item)));\n        let nextBtn = document.getElementById(\"next_button\");\n        if (count < offset + pageLength) {\n            nextBtn.style.visibility = \"hidden\";\n        } else {\n            nextBtn.style.visibility = \"visible\";\n            nextBtn.innerText = `Next (${offset + pageLength} of ${count})`;\n        }\n    });\n}\n\nfunction firstLoad() {\n    apiGet(\n        \"radius\",\n        `radius=1000&limit=${pageLength}&offset=${offset}&lon=${lon}&lat=${lat}&rate=2&format=count`\n    ).then(function (data) {\n        count = data.count;\n        offset = 0;\n        document.getElementById(\n            \"info\"\n        ).innerHTML += `<p>${count} objects with description in a 1km radius</p>`;\n        loadList();\n    });\n}\n\ndocument\n    .getElementById(\"search_form\")\n    .addEventListener(\"submit\", function (event) {\n        let name = document.getElementById(\"textbox\").value;\n        apiGet(\"geoname\", \"name=\" + name).then(function (data) {\n            let message = \"Name not found\";\n            if (data.status == \"OK\") {\n                message = data.name + \", \" + getCountryName(data.country);\n                lon = data.lon;\n                lat = data.lat;\n                firstLoad();\n            }\n            document.getElementById(\"info\").innerHTML = `<p>${message}</p>`;\n        });\n        event.preventDefault();\n    });\n\ndocument\n    .getElementById(\"next_button\")\n    .addEventListener(\"click\", function () {\n        offset += pageLength;\n        loadList();\n    });\n\n    var layer_names = {\n        tidal_islands: { n: \"tidal island [s]\", e: \"🏝️\" },\n        inland_islands: { n: \"inland island [s]\", e: \"🏝️\" },\n        coral_islands: { n: \"coral island [s]\", e: \"🏝️\" },\n        desert_islands: { n: \"desert island [s]\", e: \"🏝️\" },\n        high_islands: { n: \"high island [s]\", e: \"🏝️\" },\n        other_islands: { n: \"island[other islands]\", e: \"🏝️\" },\n        hot_springs: { n: \"hot spring [s]\", e: \"💧\" },\n        geysers: { n: \"geyser [s]\", e: \"💧\" },\n        springs_others: { n: \"spring[other springs]\", e: \"💧\" },\n        mountain_peaks: { n: \"mountain peak [s]\", e: \"⛰️\" },\n        volcanoes: { n: \"volcano  [es]\", e: \"⛰️\" },\n        caves: { n: \"cave [s]\", e: \"⛰️\" },\n        canyons: { n: \"canyon [s]\", e: \"⛰️\" },\n        rock_formations: { n: \"rock formation [s]\", e: \"⛰️\" },\n        crater_lakes: { n: \"crater lake [s]\", e: \"🌊\" },\n        rift_lakes: { n: \"rift lake [s]\", e: \"🌊\" },\n        salt_lakes: { n: \"salt lake [s]\", e: \"🌊\" },\n        dry_lakes: { n: \"dry lake [s]\", e: \"🌊\" },\n        reservoirs: { n: \"reservoir [s]\", e: \"🌊\" },\n        rivers: { n: \"river [s]\", e: \"🌊\" },\n        canals: { n: \"canal [s]\", e: \"🌊\" },\n        waterfalls: { n: \"waterfall [s]\", e: \"🌊\" },\n        lagoons: { n: \"lagoon [s]\", e: \"🌊\" },\n        other_lakes: { n: \"lake[other lakes]\", e: \"🌊\" },\n        golden_sand_beaches: { n: \"golden sand beach  [es]\", e: \"🏖️\" },\n        white_sand_beaches: { n: \"white sand beach  [es]\", e: \"🏖️\" },\n        black_sand_beaches: { n: \"black sand beach  [es]\", e: \"🏖️\" },\n        shingle_beaches: { n: \"shingle beach  [es]\", e: \"🏖️\" },\n        rocks_beaches: { n: \"rocks beach  [es]\", e: \"🏖️\" },\n        urbans_beaches: { n: \"urbans beach  [es]\", e: \"🏖️\" },\n        nude_beaches: { n: \"nude beach  [es]\", e: \"🏖️\" },\n        other_beaches: { n: \"beach[other beaches]\", e: \"🏖️\" },\n        aquatic_protected_areas: { n: \"aquatic protected area [s]\", e: \"🏞️\" },\n        wildlife_reserves: { n: \"wildlife reserve [s]\", e: \"🏞️\" },\n        national_parks: { n: \"national park [s]\", e: \"🏞️\" },\n        nature_reserves_others: {\n          n: \"nature reserve[other nature reserves]\",\n          e: \"🏞️\"\n        },\n        natural_monuments: { n: \"natural monument [s]\", e: \"🏞️\" },\n        other_nature_conservation_areas: {\n          n: \"nature conservation area [s]\",\n          e: \"🏞️\"\n        },\n        glaciers: { n: \"Glacier [s]\", e: \"🏔️\" },\n        national_museums: { n: \"national museum [s]\", e: \"🏛️\" },\n        local_museums: { n: \"local museum [s]\", e: \"🏛️\" },\n        maritime_museums: { n: \"maritime museum [s]\", e: \"🏛️\" },\n        railway_museums: { n: \"railway museum [s]\", e: \"🏛️\" },\n        aviation_museums: { n: \"aviation museum [s]\", e: \"🏛️\" },\n        automobile_museums: { n: \"automobile museum [s]\", e: \"🏛️\" },\n        computer_museums: { n: \"computer museum [s]\", e: \"🏛️\" },\n        heritage_railways: { n: \"heritage railway [s]\", e: \"🏛️\" },\n        other_technology_museums: {\n          n: \"technology museum[other technology museums]\",\n          e: \"🏛️\"\n        },\n        science_museums: { n: \"science museum [s]\", e: \"🏛️\" },\n        planetariums: { n: \"planetarium [s]\", e: \"🏛️\" },\n        military_museums: { n: \"military museum [s]\", e: \"🏛️\" },\n        history_museums: { n: \"history museum [s]\", e: \"🏛️\" },\n        archaeological_museums: { n: \"archaeological museum [s]\", e: \"🏛️\" },\n        biographical_museums: { n: \"biographical museum [s]\", e: \"🏛️\" },\n        open_air_museums: { n: \"open-air museum [s]\", e: \"🏛️\" },\n        fashion_museums: { n: \"fashion museum [s]\", e: \"🏛️\" },\n        children_museums: { n: \"children museum [s]\", e: \"🏛️\" },\n        historic_house_museums: { n: \"historic house museum [s]\", e: \"🏛️\" },\n        art_galleries: { n: \"art gallery  [ies]\", e: \"🏛️\" },\n        zoos: { n: \"zoo [s]\", e: \"🏛️\" },\n        aquariums: { n: \"aquarium [s]\", e: \"🏛️\" },\n        other_museums: { n: \"museum[other museums]\", e: \"🏛️\" },\n        sylvan_theatres: { n: \"sylvan theatre [s]\", e: \"🎭\" },\n        opera_houses: { n: \"opera house [s]\", e: \"🎭\" },\n        music_venues: { n: \"music venue [s]\", e: \"🎭\" },\n        concert_halls: { n: \"concert hall [s]\", e: \"🎭\" },\n        puppetries: { n: \"puppetry  [ies]\", e: \"🎭\" },\n        children_theatres: { n: \"сhildren\\u0027s theatre [s]\", e: \"🎭\" },\n        other_theatres: { n: \"theatre[other theatres]\", e: \"🎭\" },\n        cinemas: { n: \"movie theatre [s]\", e: \"🎭\" },\n        circuses: { n: \"circus  [es]\", e: \"🎭\" },\n        wall_painting: { n: \"wall painting\", e: \"⛲\" },\n        squares: { n: \"street[squares and streets]\", e: \"⛲\" },\n        installation: { n: \"installation\", e: \"⛲\" },\n        gardens_and_parks: { n: \"park[gardens and parks]\", e: \"⛲\" },\n        fountains: { n: \"fountain [s]\", e: \"⛲\" },\n        sculptures: { n: \"sculpture [s]\", e: \"⛲\" },\n        historic_districts: { n: \"historic district [s]\", e: \"🛡️\" },\n        historic_settlements: { n: \"historic settlement [s]\", e: \"🛡️\" },\n        fishing_villages: { n: \"fishing village [s]\", e: \"🛡️\" },\n        battlefields: { n: \"battlefield [s]\", e: \"🛡️\" },\n        castles: { n: \"castle [s]\", e: \"🏰\" },\n        hillforts: { n: \"hillfort [s]\", e: \"🏰\" },\n        fortified_towers: { n: \"fortified tower [s]\", e: \"🏰\" },\n        defensive_walls: { n: \"defensive wall [s]\", e: \"🏰\" },\n        bunkers: { n: \"bunker [s]\", e: \"🏰\" },\n        kremlins: { n: \"kremlin [s]\", e: \"🏰\" },\n        other_fortifications: { n: \"fortification[other fortifications]\", e: \"🏰\" },\n        milestones: { n: \"milestone [s]\", e: \"🗿\" },\n        monuments: { n: \"monument [s]\", e: \"🗿\" },\n        megaliths: { n: \"megalith [s]\", e: \"🏺\" },\n        menhirs: { n: \"menhir [s]\", e: \"🏺\" },\n        roman_villas: { n: \"roman villa [s]\", e: \"🏺\" },\n        cave_paintings: { n: \"cave painting [s]\", e: \"🏺\" },\n        settlements: { n: \"settlement [s]\", e: \"🏺\" },\n        rune_stones: { n: \"rune stone [s]\", e: \"🏺\" },\n        other_archaeological_sites: { n: \"archaeological site [s]\", e: \"🏺\" },\n        cemeteries: { n: \"cemetery  [ies]\", e: \"⚱️\" },\n        war_graves: { n: \"war grave [s]\", e: \"⚱️\" },\n        necropolises: { n: \"necropolis  [es]\", e: \"⚱️\" },\n        dolmens: { n: \"dolmen [s]\", e: \"⚱️\" },\n        tumuluses: { n: \"tumulus  [es]\", e: \"⚱️\" },\n        mausoleums: { n: \"mausoleum [s]\", e: \"⚱️\" },\n        war_memorials: { n: \"war memorial [s]\", e: \"⚱️\" },\n        crypts: { n: \"crypt [s]\", e: \"⚱️\" },\n        other_burial_places: { n: \"burial place[other burial places]\", e: \"⚱️\" },\n        eastern_orthodox_churches: { n: \"eastern orthodox church  [es]\", e: \"⛪\" },\n        catholic_churches: { n: \"catholic church  [es]\", e: \"⛪\" },\n        other_churches: { n: \"church[other churches]\", e: \"⛪\" },\n        cathedrals: { n: \"cathedral [s]\", e: \"🛐\" },\n        mosques: { n: \"mosque [s]\", e: \"🕌\" },\n        synagogues: { n: \"synagogue [s]\", e: \"🕍\" },\n        buddhist_temples: { n: \"buddhist temple [s]\", e: \"☸️\" },\n        hindu_temples: { n: \"hindu temple [s]\", e: \"🕉️\" },\n        egyptian_temples: { n: \"egyptian temple [s]\", e: \"🛐\" },\n        other_temples: { n: \"temple[other temples]\", e: \"🛐\" },\n        monasteries: { n: \"monastery  [ies]\", e: \"🛐\" },\n        pyramids: { n: \"pyramid [s]\", e: \"🏡\" },\n        amphitheatres: { n: \"amphitheatre [s]\", e: \"🏡\" },\n        triumphal_archs: { n: \"triumphal arch [s]\", e: \"🏡\" },\n        palaces: { n: \"palace [s]\", e: \"🏡\" },\n        manor_houses: { n: \"manor house [s]\", e: \"🏡\" },\n        wineries: { n: \"wineries\", e: \"🏡\" },\n        farms: { n: \"farms\", e: \"🏡\" },\n        other_buildings_and_structures: {\n          n: \"structure[buildings and structures]\",\n          e: \"🏡\"\n        },\n        destroyed_objects: { n: \"destroyed object [s]\", e: \"🏡\" },\n        skyscrapers: { n: \"Skyscraper [s]\", e: \"🏙️\" },\n        moveable_bridges: { n: \"moveable bridge [s]\", e: \"🌉\" },\n        stone_bridges: { n: \"stone bridge [s]\", e: \"🌉\" },\n        viaducts: { n: \"viaduct [s]\", e: \"🌉\" },\n        roman_bridges: { n: \"Roman bridge [s]\", e: \"🌉\" },\n        footbridges: { n: \"footbridge [s]\", e: \"🌉\" },\n        aqueducts: { n: \"aqueduct [s]\", e: \"🌉\" },\n        suspension_bridges: { n: \"suspension bridge [s]\", e: \"🌉\" },\n        other_bridges: { n: \"bridge[other bridges]\", e: \"🌉\" },\n        observation_towers: { n: \"observation tower [s]\", e: \"🗼\" },\n        watchtowers: { n: \"watchtower [s]\", e: \"🗼\" },\n        water_towers: { n: \"water tower [s]\", e: \"🗼\" },\n        transmitter_towers: { n: \"transmitter tower [s]\", e: \"🗼\" },\n        clock_towers: { n: \"clock tower [s]\", e: \"🗼\" },\n        bell_towers: { n: \"bell tower [s]\", e: \"🗼\" },\n        minarets: { n: \"minaret [s]\", e: \"🗼\" },\n        other_towers: { n: \"tower[other towers]\", e: \"🗼\" },\n        lighthouses: { n: \"Lighthouse [s]\", e: \"🗼\" },\n        railway_stations: { n: \"Railway station [s]\", e: \"🏭\" },\n        factories: { n: \"Factory  [ies]\", e: \"🏭\" },\n        mints: { n: \"Mint [s]\", e: \"🏭\" },\n        power_stations: { n: \"Power station [s]\", e: \"🏭\" },\n        dams: { n: \"Dam [s]\", e: \"🏭\" },\n        mills: { n: \"Mill [s]\", e: \"🏭\" },\n        abandoned_railway_stations: { n: \"Abandoned railway station [s]\", e: \"🏭\" },\n        abandoned_mineshafts: { n: \"Abandoned mineshaft [s]\", e: \"🏭\" },\n        mineshafts: { n: \"Mineshaft [s]\", e: \"🏭\" },\n        other_buildings: { n: \"Building[Other buildings]\", e: \"🏭\" },\n        sundials: { n: \"Sundial [s]\", e: \"📸\" },\n        view_points: { n: \"View point [s]\", e: \"📸\" },\n        red_telephone_boxes: { n: \"Red telephone box  [es]\", e: \"📸\" },\n        tourist_object: { n: \"tourist attraction [s]\", e: \"📸\" },\n        historic_object: { n: \"historic attraction [s]\", e: \"📸\" },\n        amusement_parks: { n: \"amusement park [s]\", e: \"📸\" },\n        miniature_parks: { n: \"miniature park [s]\", e: \"📸\" },\n        water_parks: { n: \"water park [s]\", e: \"📸\" },\n        roller_coasters: { n: \"roller coaster [s]\", e: \"📸\" },\n        ferris_wheels: { n: \"ferris wheel [s]\", e: \"📸\" },\n        other_amusement_rides: {\n          n: \"amusement ride[other amusement rides]\",\n          e: \"📸\"\n        },\n        saunas: { n: \"sauna[s]\", e: \"📸\" },\n        thermal_baths: { n: \"thermal bath [s]\", e: \"📸\" },\n        open_air_baths: { n: \"open-air bath [s]\", e: \"📸\" },\n        other_bathhouses: { n: \"bathhouse [s]\", e: \"📸\" },\n        skiing: { n: \"skiing\", e: \"📸\" },\n        cross_country_skiing: { n: \"cross country skiing\", e: \"📸\" },\n        other_winter_sports: { n: \"winter sport[other winter sports]\", e: \"📸\" },\n        dive_centers: { n: \"dive center [s]\", e: \"📸\" },\n        dive_spots: { n: \"dive spot [s]\", e: \"📸\" },\n        wrecks: { n: \"wreck [s]\", e: \"📸\" },\n        climbing: { n: \"climbing\", e: \"📸\" },\n        surfing: { n: \"surfing\", e: \"📸\" },\n        kitesurfing: { n: \"kitesurfing\", e: \"📸\" },\n        stadiums: { n: \"stadium [s]\", e: \"📸\" },\n        pools: { n: \"pool [s]\", e: \"📸\" },\n        strip_clubs: { n: \"strip club [s]\", e: \"📸\" },\n        casino: { n: \"casino\", e: \"📸\" },\n        brothels: { n: \"brothel [s]\", e: \"📸\" },\n        nightclubs: { n: \"nightclub [s]\", e: \"📸\" },\n        alcohol: { n: \"alcohol\", e: \"📸\" },\n        adult_hotels: { n: \"love hotel [s]\", e: \"📸\" },\n        erotic_shops: { n: \"erotic shop [s]\", e: \"📸\" },\n        hookah: { n: \"hookah\", e: \"📸\" },\n        car_rental: { n: \"Car rental\", e: \"📸\" },\n        car_sharing: { n: \"Car sharing\", e: \"📸\" },\n        car_wash: { n: \"Car wash\", e: \"📸\" },\n        charging_station: { n: \"Charging station [s]\", e: \"📸\" },\n        bicycle_rental: { n: \"Bicycle rental\", e: \"📸\" },\n        boat_sharing: { n: \"Boat sharing\", e: \"📸\" },\n        fuel: { n: \"Fuel\", e: \"📸\" },\n        supermarkets: { n: \"Supermarket [s]\", e: \"📸\" },\n        conveniences: { n: \"Convenience [s]\", e: \"📸\" },\n        fish_stores: { n: \"Fish store [s]\", e: \"📸\" },\n        outdoor: { n: \"Outdoor\", e: \"📸\" },\n        malls: { n: \"Mall [s]\", e: \"📸\" },\n        marketplaces: { n: \"Marketplace [s]\", e: \"📸\" },\n        bakeries: { n: \"Bakery  [ies]\", e: \"📸\" },\n        restaurants: { n: \"Restaurant [s]\", e: \"📸\" },\n        cafes: { n: \"Cafe [s]\", e: \"📸\" },\n        fast_food: { n: \"Fast food\", e: \"📸\" },\n        food_courts: { n: \"Food court [s]\", e: \"📸\" },\n        pubs: { n: \"Pub [s]\", e: \"📸\" },\n        bars: { n: \"Bar [s]\", e: \"📸\" },\n        biergartens: { n: \"Biergarten [s]\", e: \"📸\" },\n        picnic_site: { n: \"Picnic site [s]\", e: \"📸\" },\n        bank: { n: \"Bank [s]\", e: \"📸\" },\n        atm: { n: \"ATM\", e: \"📸\" },\n        bureau_de_change: { n: \"Bureau de change\", e: \"📸\" },\n        apartments: { n: \"Apartment [s]\", e: \"📸\" },\n        guest_houses: { n: \"Guest house [s]\", e: \"📸\" },\n        campsites: { n: \"Campsite [s]\", e: \"📸\" },\n        resorts: { n: \"Resort [s]\", e: \"📸\" },\n        motels: { n: \"Motel [s]\", e: \"📸\" },\n        other_hotels: { n: \"Hotel [s]\", e: \"📸\" },\n        hostels: { n: \"Hostel [s]\", e: \"📸\" },\n        villas_and_chalet: { n: \"Villa [Villas and chalet]\", e: \"📸\" },\n        alpine_hut: { n: \"Alpine hut [s]\", e: \"📸\" },\n        love_hotels: { n: \"Love hotel [s]\", e: \"📸\" }\n      };\n      \n      var isoCountries = {\n        AD: \"Andorra\",\n        AE: \"United Arab Emirates\",\n        AF: \"Afghanistan\",\n        AG: \"Antigua and Barbuda\",\n        AI: \"Anguilla\",\n        AL: \"Albania\",\n        AM: \"Armenia\",\n        AN: \"Netherlands Antilles\",\n        AO: \"Angola\",\n        AQ: \"Antarctica\",\n        AR: \"Argentina\",\n        AS: \"American Samoa\",\n        AT: \"Austria\",\n        AU: \"Australia\",\n        AW: \"Aruba\",\n        AX: \"Åland Islands\",\n        AZ: \"Azerbaijan\",\n        BA: \"Bosnia and Herzegovina\",\n        BB: \"Barbados\",\n        BD: \"Bangladesh\",\n        BE: \"Belgium\",\n        BF: \"Burkina Faso\",\n        BG: \"Bulgaria\",\n        BH: \"Bahrain\",\n        BI: \"Burundi\",\n        BJ: \"Benin\",\n        BL: \"Saint Barthélemy\",\n        BM: \"Bermuda\",\n        BN: \"Brunei\",\n        BO: \"Bolivia\",\n        BQ: \"Bonaire, Saint Eustatius, and Saba\",\n        BR: \"Brazil\",\n        BS: \"Bahamas\",\n        BT: \"Bhutan\",\n        BV: \"Bouvet Island\",\n        BW: \"Botswana\",\n        BY: \"Belarus\",\n        BZ: \"Belize\",\n        CA: \"Canada\",\n        CC: \"Cocos [Keeling] Islands\",\n        CD: \"Belgian Congo\",\n        CF: \"Central African Republic\",\n        CG: \"Republic of the Congo\",\n        CH: \"Switzerland\",\n        CI: \"Ivory Coast\",\n        CK: \"Cook Islands\",\n        CL: \"Chile\",\n        CM: \"Cameroon\",\n        CN: \"China\",\n        CO: \"Colombia\",\n        CR: \"Costa Rica\",\n        CS: \"Serbia and Montenegro\",\n        CU: \"Cuba\",\n        CV: \"Cape Verde\",\n        CW: \"Curaçao\",\n        CX: \"Christmas Island\",\n        CY: \"Cyprus\",\n        CZ: \"Czech Republic\",\n        DE: \"Germany\",\n        DJ: \"Djibouti\",\n        DK: \"Denmark\",\n        DM: \"Dominica\",\n        DO: \"Dominican Republic\",\n        DZ: \"Algeria\",\n        EC: \"Ecuador\",\n        EE: \"Estonia\",\n        EG: \"Egypt\",\n        EH: \"Western Sahara\",\n        ER: \"Eritrea\",\n        ES: \"Spain\",\n        ET: \"Ethiopia\",\n        FI: \"Finland\",\n        FJ: \"Fiji\",\n        FK: \"Falkland Islands\",\n        FM: \"Micronesia\",\n        FO: \"Faroe Islands\",\n        FR: \"France\",\n        GA: \"Gabon\",\n        GB: \"United Kingdom\",\n        GD: \"Grenada\",\n        GE: \"Georgia\",\n        GF: \"French Guiana\",\n        GG: \"Guernsey\",\n        GH: \"Ghana\",\n        GI: \"Gibraltar\",\n        GL: \"Greenland\",\n        GM: \"The Gambia\",\n        GN: \"Guinea\",\n        GP: \"Guadeloupe\",\n        GQ: \"Equatorial Guinea\",\n        GR: \"Greece\",\n        GS: \"South Georgia and the South Sandwich Islands\",\n        GT: \"Guatemala\",\n        GU: \"Guam\",\n        GW: \"Guinea-Bissau\",\n        GY: \"Guyana\",\n        HK: \"Hong Kong\",\n        HM: \"Heard Island and McDonald Islands\",\n        HN: \"Honduras\",\n        HR: \"Croatia\",\n        HT: \"Haiti\",\n        HU: \"Hungary\",\n        ID: \"Indonesia\",\n        IE: \"Ireland\",\n        IL: \"Israel\",\n        IM: \"Isle of Man\",\n        IN: \"India\",\n        IO: \"British Indian Ocean Territory\",\n        IQ: \"Iraq\",\n        IR: \"Iran\",\n        IS: \"Iceland\",\n        IT: \"Italy\",\n        JE: \"Jersey\",\n        JM: \"Jamaica\",\n        JO: \"Hashemite Kingdom of Jordan\",\n        JP: \"Japan\",\n        KE: \"Kenya\",\n        KG: \"Kyrgyzstan\",\n        KH: \"Cambodia\",\n        KI: \"Kiribati\",\n        KM: \"Comoros\",\n        KN: \"St Kitts and Nevis\",\n        KP: \"North Korea\",\n        KR: \"Republic of Korea\",\n        KW: \"Kuwait\",\n        KY: \"Cayman Islands\",\n        KZ: \"Kazakhstan\",\n        LA: \"Laos\",\n        LB: \"Lebanon\",\n        LC: \"St Lucia\",\n        LI: \"Liechtenstein\",\n        LK: \"Sri Lanka\",\n        LR: \"Liberia\",\n        LS: \"Lesotho\",\n        LT: \"Republic of Lithuania\",\n        LU: \"Luxembourg\",\n        LV: \"Latvia\",\n        LY: \"Libya\",\n        MA: \"Morocco\",\n        MC: \"Monaco\",\n        MD: \"Republic of Moldova\",\n        ME: \"Montenegro\",\n        MF: \"Saint Martin\",\n        MG: \"Madagascar\",\n        MH: \"Marshall Islands\",\n        MK: \"Macedonia\",\n        ML: \"Mali\",\n        MM: \"Myanmar [Burma]\",\n        MN: \"Mongolia\",\n        MO: \"Macao\",\n        MP: \"Northern Mariana Islands\",\n        MQ: \"Martinique\",\n        MR: \"Mauritania\",\n        MS: \"Montserrat\",\n        MT: \"Malta\",\n        MU: \"Mauritius\",\n        MV: \"Maldives\",\n        MW: \"Malawi\",\n        MX: \"Mexico\",\n        MY: \"Malaysia\",\n        MZ: \"Mozambique\",\n        NA: \"Namibia\",\n        NC: \"New Caledonia\",\n        NE: \"Niger\",\n        NF: \"Norfolk Island\",\n        NG: \"Nigeria\",\n        NI: \"Nicaragua\",\n        NL: \"Netherlands\",\n        NO: \"Norway\",\n        NP: \"Nepal\",\n        NR: \"Republic of Nauru\",\n        NU: \"Niue\",\n        NZ: \"New Zealand\",\n        OM: \"Oman\",\n        PA: \"Panama\",\n        PE: \"Peru\",\n        PF: \"French Polynesia\",\n        PG: \"Papua New Guinea\",\n        PH: \"Philippines\",\n        PK: \"Pakistan\",\n        PL: \"Poland\",\n        PM: \"Saint Pierre and Miquelon\",\n        PN: \"Pitcairn Islands\",\n        PR: \"Puerto Rico\",\n        PS: \"Palestine\",\n        PT: \"Portugal\",\n        PW: \"Palau\",\n        PY: \"Paraguay\",\n        QA: \"Qatar\",\n        RE: \"Réunion\",\n        RO: \"Romania\",\n        RS: \"Serbia\",\n        RU: \"Russia\",\n        RW: \"Rwanda\",\n        SA: \"Saudi Arabia\",\n        SB: \"Solomon Islands\",\n        SC: \"Seychelles\",\n        SD: \"Sudan\",\n        SE: \"Sweden\",\n        SG: \"Singapore\",\n        SH: \"Saint Helena\",\n        SI: \"Slovenia\",\n        SJ: \"Svalbard and Jan Mayen\",\n        SK: \"Slovakia\",\n        SL: \"Sierra Leone\",\n        SM: \"San Marino\",\n        SN: \"Senegal\",\n        SO: \"Somalia\",\n        SR: \"Suriname\",\n        SS: \"Republic of South Sudan\",\n        ST: \"São Tomé and Príncipe\",\n        SV: \"El Salvador\",\n        SX: \"Sint Maarten\",\n        SY: \"Syria\",\n        SZ: \"Swaziland\",\n        TC: \"Turks and Caicos Islands\",\n        TD: \"Chad\",\n        TF: \"French Southern Territories\",\n        TG: \"Togo\",\n        TH: \"Thailand\",\n        TJ: \"Tajikistan\",\n        TK: \"Tokelau\",\n        TL: \"East Timor\",\n        TM: \"Turkmenistan\",\n        TN: \"Tunisia\",\n        TO: \"Tonga\",\n        TR: \"Turkey\",\n        TT: \"Trinidad and Tobago\",\n        TV: \"Tuvalu\",\n        TW: \"Taiwan\",\n        TZ: \"Tanzania\",\n        UA: \"Ukraine\",\n        UG: \"Uganda\",\n        UM: \"U.S. Minor Outlying Islands\",\n        US: \"United States of America\",\n        UY: \"Uruguay\",\n        UZ: \"Uzbekistan\",\n        VA: \"Vatican City\",\n        VC: \"St Vincent and Grenadines\",\n        VE: \"Venezuela\",\n        VG: \"British Virgin Islands\",\n        VI: \"U.S. Virgin Islands\",\n        VN: \"Vietnam\",\n        VU: \"Vanuatu\",\n        WF: \"Wallis and Futuna\",\n        WS: \"Samoa\",\n        XK: \"Republic of Kosovo\",\n        YE: \"Yemen\",\n        YT: \"Mayotte\",\n        ZA: \"Republic of South Africa\",\n        ZM: \"Zambia\",\n        ZW: \"Zimbabwe\"\n      };\n      \n      function getCountryName(countryCode) {\n        if (isoCountries.hasOwnProperty(countryCode)) {\n          return isoCountries[countryCode];\n        } else {\n          return countryCode;\n        }\n      }\n      \n      function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n      }\n      \n      function parsePlural(label) {\n        var sb_single = new Array(\"\");\n        var sb_plural = new Array(\"\");\n        var spaces = 0;\n        for (var i = 0; i < label.length; i++) {\n          var ch = label.charAt(i);\n          if (ch != \"[\") {\n            sb_single.push(ch);\n            sb_plural.push(ch);\n            if (ch == \" \") {\n              spaces++;\n            } else {\n              spaces = 0;\n            }\n          } else {\n            var sb = new Array(\"\");\n            var j = i + 1;\n            for (; j < label.length; j++) {\n              ch = label.charAt(j);\n              if (ch == \"]\") break;\n              sb.push(ch);\n            }\n            var len = j - i - 1;\n            i = sb_plural.length;\n            sb_plural.splice(Math.max(0, i - len), len);\n            sb_plural.push(sb.join(\"\"));\n            if (spaces != 0) {\n              i = sb_single.length;\n              sb_single.splice(Math.max(0, i - spaces), spaces);\n            }\n            i = j;\n          }\n        }\n        return {\n          single: capitalizeFirstLetter(sb_single.join(\"\")),\n          plural: sb_plural.join(\"\")\n        };\n      }\n      \n      function getCategoryName(kinds) {\n        let names = [];\n        kinds.split(\",\").forEach(function(kind) {\n          let item = layer_names[kind];\n          if (item) names.push(parsePlural(item.n).single);\n        });\n        return names.join(\", \");\n      }\n      \n\nexport default class Search extends Component{\n    render(){\n        return(\n            <body>\n            <div class=\"container\">\n                <form id=\"search_form\" class=\"input-group mb-4 border p-1\">\n                    <div class=\"input-group-prepend border-0\">\n                        <button id=\"button-search\" type=\"submit\" class=\"btn btn-link \">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n                    <input\n                        id=\"textbox\"\n                        type=\"search\"\n                        placeholder=\"Region, city, village, etc. (e.g. Moscow)\"\n                        aria-describedby=\"button-search\"\n                        class=\"form-control bg-none border-0\"\n                    />\n                </form>\n\n                <div id=\"info\" class=\"alert alert-primary\"></div>\n                <div class=\"row\">\n                    <div class=\"col-12 col-lg-5\">\n                        <div id=\"list\" class=\"list-group\"></div>\n                        <nav class=\"text-center\">\n                            <button id=\"next_button\" type=\"button\" class=\"btn btn-primary\">\n                                Next\n                            </button>\n                        </nav>\n                    </div>\n                    <div class=\"col-12 col-lg-7\">\n                        <div id=\"poi\" class=\"alert\"></div>\n                    </div>\n                </div>\n                \n            </div>\n            </body>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}